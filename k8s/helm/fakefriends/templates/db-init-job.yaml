apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "fakefriends.fullname" . }}-db-init
  labels:
    {{- include "fakefriends.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        {{- include "fakefriends.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      containers:
        - name: db-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d postgres -c '\q'; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 1
              done
              echo "PostgreSQL is up - executing database initialization"
              bundle exec rails db:drop db:create db:migrate db:seed
          env:
            - name: POSTGRES_HOST
              value: {{ .Values.db.DATABASE_HOST | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.db.DATABASE_USER | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "fakefriends.fullname" . }}-db-secret
                  key: postgres-password
            - name: RAILS_ENV
              value: {{ .Values.env.RAILS_ENV | quote }}
            - name: RAILS_LOG_TO_STDOUT
              value: {{ .Values.env.RAILS_LOG_TO_STDOUT | quote }}
